/* -*- Mode: C; tab-width: 3; c-basic-offset: 3; indent-tabs-mode: nil -*- */
/* vim: set filetype=C tabstop=3 softtabstop=3 shiftwidth=3 expandtab: */

/* ekvs -- Copyright (C) 2011 GameClay LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef _EKVS_H_
#define _EKVS_H_

#include <stdlib.h>
#include <stdint.h>

#ifndef EKVS_API
#  define EKVS_API
#endif

typedef void* (*ekvs_malloc_ptr)(size_t size);
typedef void* (*ekvs_realloc_ptr)(void* ptr, size_t size);
typedef void (*ekvs_free_ptr)(void* ptr);

/**
 * Options for operation and initialization of the ekvs database
 */
typedef struct ekvs_opts ekvs_opts;
struct ekvs_opts {
   uint64_t initial_table_size;     /**< Initial table size for new, or in-memory databases. If 0, the value EKVS_INITIAL_TABLE_SIZE will be used. */
   float grow_threshold;            /**< When this percentage of the table has been used, it will automatically grow the table. If 0, the value EKVS_GROW_THRESHOLD will be used. */
   ekvs_malloc_ptr user_malloc;     /**< Pointer to a malloc function. Specify NULL to use standard malloc. */
   ekvs_realloc_ptr user_realloc;   /**< Pointer to a realloc function. Specify NULL to use standard realloc. */
   ekvs_free_ptr user_free;         /**< Pointer to a free function. Specify NULL to use standard free. */
};

typedef struct _ekvs_db* ekvs;

#define EKVS_OK               0x00  /**< Operation successful */
#define EKVS_FAIL             0x10  /**< Operation failed due to a non-specific error */
#define EKVS_ALLOCATION_FAIL  0x11  /**< Operation failed due to a memory allocation error */
#define EKVS_FILE_FAIL        0x12  /**< Operation failed due to a file i/o error */
#define EKVS_NO_KEY           0x13  /**< Operation failed because the key did not exist */

/**
 * Flags that change the behavior for setting a key using ekvs_set_ex
 */
typedef enum {
   ekvs_set_no_grow     = 1 << 0    /**< Do not grow the table if the grow threshold has been exceeded as a result of this set. */
} ekvs_set_flags;

/**
 * Open an ekvs database.
 *
 * @param store[out]    The destination ekvs handle.
 * @param path[in]      The filename of the ekvs database to open, or NULL for an in-memory database.
 * @param opts[in]      Creation options for the ekvs database.
 *
 * @return EKVS_OK if successful, or an error code otherwise.
 */
extern EKVS_API int ekvs_open(ekvs* store, const char* path, const ekvs_opts* opts);

/**
 * Close an ekvs database.
 *
 * @param ekvs[in]      The ekvs handle to close.
 */
extern EKVS_API void ekvs_close(ekvs store);

/**
 * Write the state of the table to disk.
 *
 * @param store[in]     The ekvs database to serialize.
 * @param snapshot_to   If a filename is specified, it will write the snapshot to that location.
 *                      If NULL, the file specified during ekvs_open will be updated.
 *
 * @return EKVS_OK if successful, or an error code otherwise.
 */
extern EKVS_API int ekvs_snapshot(ekvs store, const char* snapshot_to);

/**
 * The last error code which was generated by an ekvs operation.
 *
 * @return Last error code generated.
 */
extern EKVS_API int ekvs_last_error(ekvs store);

/**
 * Set a key to a value.
 *
 * Assigns the specified data to a key, and writes an entry in the binlog.
 *
 * @param store[in]     The ekvs database to modify.
 * @param key[in]       The key to which the data should be assigned.
 * @param data[in]      The data to assign to the key.
 * @param data_sz[in]   The size of the data being assigned.
 * @param flags[in]     Flags to use while assigning the value. @see ekvs_set_flags
 *
 * @return EKVS_OK if successful, or an error code otherwise.
 */
extern EKVS_API int ekvs_set_ex(ekvs store, const char* key, const void* data, size_t data_sz, char flags);

/**
 * Set a key to a value.
 *
 * Assigns the specified data to a key, and writes an entry in the binlog.
 *
 * @param store[in]     The ekvs database to modify.
 * @param key[in]       The key to which the data should be assigned.
 * @param data[in]      The data to assign to the key.
 * @param data_sz[in]   The size of the data being assigned.
 *
 * @return EKVS_OK if successful, or an error code otherwise.
 */
static EKVS_API int ekvs_set(ekvs store, const char* key, const void* data, size_t data_sz)
{
   return ekvs_set_ex(store, key, data, data_sz, 0);
}

/**
 * Retrieve the value associated with a key.
 *
 * @param store[in]     The ekvs database to query.
 * @param key[in]       The key to retrieve.
 * @param data[out]     A pointer which will be assigned the location of the data requested.
 *                      Data is not copied into this pointer, it's value is simply assigned.
 * @param data_sz[out]  A pointer which will be assigned the size of the data requested.
 *
 * @return EKVS_OK if successful, or an error code otherwise.
 */
extern EKVS_API int ekvs_get(ekvs store, const char* key, const void** data, size_t* data_sz);

/**
 * Delete a key, and free the memory used for storage of the data it references.
 *
 * @param store[in]     The ekvs database to modify.
 * @param key[in]       The key to delete.
 *
 * @return EKVS_OK if successful, or an error code otherwise.
 */
extern EKVS_API int ekvs_del(ekvs store, const char* key);

/* TODO: lists/sets ala redis? */

#define EKVS_INITIAL_TABLE_SIZE 128
#define EKVS_GROW_THRESHOLD 0.75f

#endif
